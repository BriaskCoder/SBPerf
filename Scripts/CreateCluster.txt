##Service Bus Create
az login
az deployment group create --resource-group MSC --template-file ServiceBusCreate.bicep
# Unique Namespace name value must be between 6 and 50 characters long.
# namespace can contain only letters, numbers, and hyphens. 
# The namespace must start with a letter, and it must end with a letter or number.
# Powershell must be directory for script file
# Connection string in resource - Shared Access policies

#Get ConnectionString from Azure Service Bus
az servicebus namespace authorization-rule keys list --resource-group MSC --namespace-name briask-MSC-SB-Run1 --name RootManageSharedAccessKey --query primaryConnectionString -o tsv
##Service Bus Create

##AKS Create
az login
az aks create --resource-group MSC --name myAKSCluster --node-count 1 --generate-ssh-keys --attach-acr brwscr
##AKS Create

SSH key files 'C:\Users\Brian\.ssh\id_rsa' and 'C:\Users\Brian\.ssh\id_rsa.pub' have been generated under ~/.ssh to allow SSH access to the VM. 
If using machines without permanent storage like Azure Cloud Shell without an attached file share, back up your keys to a safe location

####//connect to your Kubernetes cluster#####
az aks get-credentials --resource-group MSC --name myAKSCluster
#az aks get-credentials --resource-group myAKS_rg --name aks_MSC_cluster

//Get login server address
az acr list --resource-group MSC --query "[].{acrLoginServer:loginServer}" --output table

#login to docker?? start docker desktop also?
az acr login -n brwscr

#attach ACR to AKS
# Attach using acr-name
az aks update --name aks_MSC_cluster --resource-group myAKS_rg --attach-acr brwscr

# Attach using acr-resource-id
az aks update --name aks_MSC_cluster --resource-group myAKS_rg --attach-acr <acr-resource-id>

# Detach using acr-name
az aks update --name aks_MSC_cluster --resource-group myAKS_rg --detach-acr brwscr

# Detach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-resource-id>

#get namespaces
kubectl get namespace

#list deployments
kubectl get deployments

//AKS deployment manifest
kubectl apply -f .\mydeployment.yaml

//list pods
kubectl get pods

#list nodes
kubectl get nodes
#deployment
kubectl apply -f mydeployment.yaml

kubectl delete -f .\mydeployment.yaml

Standard_DS2_v2

az acr login -n brwscr

#build docker image
docker build -t myimage .

# copy the image up to Azure ACR
docker tag myimage brwscr.azurecr.io/myimage
docker push brwscr.azurecr.io/myimage

# deploy the image
kubectl delete -f .\mydeployment.yaml
kubectl apply -f mydeployment.yaml

# Create an SSH key pair using Azure CLI
az sshkey create --name "myAKS_SSHKey" --resource-group "MSC"

# Create an SSH key pair using ssh-keygen
ssh-keygen -t rsa -b 4096

#create a resource group
az group create myAKS_rg

#run the bicep file to create the cluster
az deployment group create --resource-group myAKS_rg --template-file CreateAksCluster.bicep --parameters dnsPrefix=myAKSCluster linuxAdminUsername=brws sshRSAPublicKey='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDsEXMVZguNhNr9B7VWdd2PIY07iexQoh8P+249ijVFU5sdDQbYGm1YyJ4sFc4nCUtjggk+T0Yyim0j1TI2YUY5t2+8S+tXn7xDEuiWp33qFpS3Ozc5n52WQlwDLHjit6oAp7gxzib6A1eiADHuawc+HhwCRVXpnY5KeUtpGeffeY3Kwu8fh87L8EsvCyZPt9TuDSP7m/3NMW4aCTh66dEgvLTTWHeJkuhzidj3DpSEB+vi47aVmybsYKUzv8obKwDS86+Fe2KdRGJIgTnihXWitWyVU8nWHF6DHLsrto4DZF4IchRxopoF8uN/DYFexAPFaIVCF5za8H6UVXHVWArbRPIKCbFAJWd9b/X7hfS2gTN3nP3jLA3IMNKaxsJubL8ZfqasSaRmFAJ9iWGpx2GaTkF2y3FytMSfkeP+DEM0jdvlHKS/BS4r542QZQ9UbFMRxQ9d10aRRhIc5WaDBS6nkULt9XBEWw1JDHr1JZ387vzMd8wEEFqV08fjGXMJlGmEaX2EHVoo9fkDVhiHC2xMOocedzEGM7UoRAVoSBRNw8IkkOC6rfkeLGFwiUiXG5jyBFpQcb6OYiUAyVV5cnekExJtanlIfM5TD5c9peUWMTFaPIvzf/O/qrkG4ipwif1Yw8m4qcFwPIbLP7mlP7aFH0uerb9jt2n37bv55hU1Xw== brian@Flyer'

az aks check-acr --resource-group myAKS_rg --name aks_MSC_cluster --acr brwscr.azurecr.io

# new location
docker build -t producer -f producer-docker .
docker tag producer brwscr.azurecr.io/producer
docker push brwscr.azurecr.io/producer
Invoke-RestMethod -URI https://resultsservice.azurewebsites.net/api/Results/newrun
kubectl apply -f .\Scripts\deploy_producer.yaml
kubectl delete -f .\Scripts\deploy_producer.yaml

#previous pwershell commands 
cat (Get-PSReadlineOption).HistorySavePath